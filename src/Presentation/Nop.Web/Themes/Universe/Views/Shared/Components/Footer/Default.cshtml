@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService

@model FooterModel

<div class="footer">
    <div class="footer-upper">
        <div class="footbox">
            <h3 class="title">@T("Footer.FollowUs")</h3>
            @await Component.InvokeAsync("NewsletterBox")
        </div>
    </div>
    <div class="footer-middle">
        <div class="center">
            <div class="footlist-wrapper">
                <div class="footlist">
                    <h3 class="title">@T("Footer.Information")</h3>
                    <ul>
                        @if (Model.NewsEnabled && Model.DisplayNewsFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("NewsArchive")">@T("News")</a></li>
                        }
                        @if (Model.BlogEnabled && Model.DisplayBlogFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                        }
                        @if (Model.ForumEnabled && Model.DisplayForumsFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                        }
                        @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn1).ToList())
                        {
                            <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                        }
                    </ul>
                </div>
                <div class="footlist">
                    <h3 class="title">@T("Footer.CustomerService")</h3>
                    <ul>
                        @if (Model.RecentlyViewedProductsEnabled && Model.DisplayRecentlyViewedProductsFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("RecentlyViewedProducts")">@T("Products.RecentlyViewedProducts")</a></li>
                        }
                        @if (Model.CompareProductsEnabled && Model.DisplayCompareProductsFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("CompareProducts")">@T("Products.Compare.List")</a></li>
                        }
                        @if (Model.NewProductsEnabled && Model.DisplayNewProductsFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                        }
                        @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn2).ToList())
                        {
                            <li><a href="@Url.RouteUrl("Topic", new {SeName = topic.SeName})">@topic.Name</a></li>
                        }
                        @if (Model.AllowCustomersToCheckGiftCardBalance)
                        {
                            <li><a href="@Url.RouteUrl("CheckGiftCardBalance")">@T("CheckGiftCardBalance")</a></li>
                        }
                    </ul>
                </div>
                <div class="footlist">
                    <h3 class="title">@T("Footer.MyAccount")</h3>
                    <ul>
                        @if (Model.DisplayCustomerInfoFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
                        }
                        @if (Model.DisplayCustomerOrdersFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("CustomerOrders")">@T("Account.CustomerOrders")</a></li>
                        }
                        @if (Model.ShoppingCartEnabled && Model.DisplayShoppingCartFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a></li>
                        }
                        @if (Model.WishlistEnabled && Model.DisplayWishlistFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("Wishlist")">@T("Wishlist")</a></li>
                        }
                        @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn3).ToList())
                        {
                            <li><a href="@Url.RouteUrl("Topic", new {SeName = topic.SeName})">@topic.Name</a></li>
                        }
                    </ul>
                </div>
                <div class="footlist">
                    <h3 class="title">@T("ContactUs")</h3>
                    <ul>
                        @if (Model.SitemapEnabled && Model.DisplaySitemapFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("Sitemap")">@T("Sitemap")</a></li>
                        }
                        @if (Model.DisplayContactUsFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                        }
                        @if (Model.AllowCustomersToApplyForVendorAccount && Model.DisplayApplyVendorAccountFooterItem)
                        {
                            <li><a href="@Url.RouteUrl("ApplyVendorAccount")">@T("Vendors.ApplyAccount")</a></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="footer-lower">
        <div class="center">
            <div class="cell left">
                <div class="footer-disclaimer">
                    @T("Content.CopyrightNotice", DateTime.Now.Year.ToString(), Model.StoreName)
                </div>
                @if (Model.DisplayTaxShippingInfoFooter)
                {
                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    <div class="footer-tax-shipping">
                        @T(inclTax ? "Footer.TaxShipping.InclTax" : "Footer.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </div>
                }
            </div>
            <div class="cell right">
                @if (!Model.HidePoweredByNopCommerce)
                {
                    <div class="footer-powered-by">
                        Powered by <a href="https://www.nopcommerce.com/">nopCommerce</a>
                    </div>
                }
                <div class="footer-designed-by">
                    Designed by <a href="https://www.nop-templates.com/" target="_blank">Nop-Templates.com</a>
                </div>
            </div>
            @await Component.InvokeAsync("StoreThemeSelector")
            @await Component.InvokeAsync("SocialButtons")
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.Footer })
</div>
